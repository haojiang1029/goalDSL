/*
 * generated by Xtext 2.32.0
 */
package ca.uwo.goal.ide.contentassist.antlr;

import ca.uwo.goal.ide.contentassist.antlr.internal.InternalGoalDSLParser;
import ca.uwo.goal.services.GoalDSLGrammarAccess;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class GoalDSLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(GoalDSLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, GoalDSLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getIntentionalElementAccess().getAlternatives(), "rule__IntentionalElement__Alternatives");
			builder.put(grammarAccess.getGoalTaskElementAccess().getAlternatives(), "rule__GoalTaskElement__Alternatives");
			builder.put(grammarAccess.getActorAccess().getAlternatives_2(), "rule__Actor__Alternatives_2");
			builder.put(grammarAccess.getGoalAccess().getAlternatives_2(), "rule__Goal__Alternatives_2");
			builder.put(grammarAccess.getTaskAccess().getAlternatives_2(), "rule__Task__Alternatives_2");
			builder.put(grammarAccess.getDecompositionTypeAccess().getAlternatives(), "rule__DecompositionType__Alternatives");
			builder.put(grammarAccess.getContributionTypeAccess().getAlternatives(), "rule__ContributionType__Alternatives");
			builder.put(grammarAccess.getGoalSpecificationAccess().getGroup(), "rule__GoalSpecification__Group__0");
			builder.put(grammarAccess.getRootAccess().getGroup(), "rule__Root__Group__0");
			builder.put(grammarAccess.getActorAccess().getGroup(), "rule__Actor__Group__0");
			builder.put(grammarAccess.getActorAccess().getGroup_2_1(), "rule__Actor__Group_2_1__0");
			builder.put(grammarAccess.getGoalAccess().getGroup(), "rule__Goal__Group__0");
			builder.put(grammarAccess.getGoalAccess().getGroup_2_1(), "rule__Goal__Group_2_1__0");
			builder.put(grammarAccess.getTaskAccess().getGroup(), "rule__Task__Group__0");
			builder.put(grammarAccess.getTaskAccess().getGroup_2_1(), "rule__Task__Group_2_1__0");
			builder.put(grammarAccess.getResourceAccess().getGroup(), "rule__Resource__Group__0");
			builder.put(grammarAccess.getResourceAccess().getGroup_2(), "rule__Resource__Group_2__0");
			builder.put(grammarAccess.getResourceAccess().getGroup_2_2(), "rule__Resource__Group_2_2__0");
			builder.put(grammarAccess.getContributionAccess().getGroup(), "rule__Contribution__Group__0");
			builder.put(grammarAccess.getContributionAccess().getGroup_6(), "rule__Contribution__Group_6__0");
			builder.put(grammarAccess.getDependencyAccess().getGroup(), "rule__Dependency__Group__0");
			builder.put(grammarAccess.getDependencyAccess().getGroup_3(), "rule__Dependency__Group_3__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
			builder.put(grammarAccess.getGoalSpecificationAccess().getNameAssignment_1(), "rule__GoalSpecification__NameAssignment_1");
			builder.put(grammarAccess.getGoalSpecificationAccess().getRootAssignment_3(), "rule__GoalSpecification__RootAssignment_3");
			builder.put(grammarAccess.getRootAccess().getActorsAssignment_1(), "rule__Root__ActorsAssignment_1");
			builder.put(grammarAccess.getRootAccess().getDependenciesAssignment_2(), "rule__Root__DependenciesAssignment_2");
			builder.put(grammarAccess.getActorAccess().getNameAssignment_1(), "rule__Actor__NameAssignment_1");
			builder.put(grammarAccess.getActorAccess().getIntentionalElementsAssignment_2_1_1(), "rule__Actor__IntentionalElementsAssignment_2_1_1");
			builder.put(grammarAccess.getActorAccess().getContributionAssignment_2_1_2(), "rule__Actor__ContributionAssignment_2_1_2");
			builder.put(grammarAccess.getGoalAccess().getNameAssignment_1(), "rule__Goal__NameAssignment_1");
			builder.put(grammarAccess.getGoalAccess().getDecompositionTypeAssignment_2_1_2(), "rule__Goal__DecompositionTypeAssignment_2_1_2");
			builder.put(grammarAccess.getGoalAccess().getChilldrenAssignment_2_1_5(), "rule__Goal__ChilldrenAssignment_2_1_5");
			builder.put(grammarAccess.getGoalAccess().getParentAssignment_2_1_8(), "rule__Goal__ParentAssignment_2_1_8");
			builder.put(grammarAccess.getTaskAccess().getNameAssignment_1(), "rule__Task__NameAssignment_1");
			builder.put(grammarAccess.getTaskAccess().getDecompositionTypeAssignment_2_1_2(), "rule__Task__DecompositionTypeAssignment_2_1_2");
			builder.put(grammarAccess.getTaskAccess().getChilldrenAssignment_2_1_5(), "rule__Task__ChilldrenAssignment_2_1_5");
			builder.put(grammarAccess.getTaskAccess().getParentAssignment_2_1_8(), "rule__Task__ParentAssignment_2_1_8");
			builder.put(grammarAccess.getResourceAccess().getNameAssignment_1(), "rule__Resource__NameAssignment_1");
			builder.put(grammarAccess.getResourceAccess().getDestAssignment_2_1(), "rule__Resource__DestAssignment_2_1");
			builder.put(grammarAccess.getResourceAccess().getDestAssignment_2_2_1(), "rule__Resource__DestAssignment_2_2_1");
			builder.put(grammarAccess.getContributionAccess().getSrcAssignment_0(), "rule__Contribution__SrcAssignment_0");
			builder.put(grammarAccess.getContributionAccess().getContributionTypeAssignment_3(), "rule__Contribution__ContributionTypeAssignment_3");
			builder.put(grammarAccess.getContributionAccess().getDestAssignment_5(), "rule__Contribution__DestAssignment_5");
			builder.put(grammarAccess.getContributionAccess().getDestAssignment_6_1(), "rule__Contribution__DestAssignment_6_1");
			builder.put(grammarAccess.getDependencyAccess().getSrcAssignment_0(), "rule__Dependency__SrcAssignment_0");
			builder.put(grammarAccess.getDependencyAccess().getDestAssignment_2(), "rule__Dependency__DestAssignment_2");
			builder.put(grammarAccess.getDependencyAccess().getDestAssignment_3_1(), "rule__Dependency__DestAssignment_3_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private GoalDSLGrammarAccess grammarAccess;

	@Override
	protected InternalGoalDSLParser createParser() {
		InternalGoalDSLParser result = new InternalGoalDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public GoalDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(GoalDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
