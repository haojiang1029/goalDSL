/*
 * generated by Xtext 2.32.0
 */
package ca.uwo.goal.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GoalDSLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class GoalSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uwo.goal.GoalDSL.GoalSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGoalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRootAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRootRootParserRuleCall_3_0 = (RuleCall)cRootAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//GoalSpecification:
		//    'goal'
		//    name=STRING
		//    '{'
		//        root=Root
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'goal'
		//name=STRING
		//'{'
		//    root=Root
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'goal'
		public Keyword getGoalKeyword_0() { return cGoalKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//root=Root
		public Assignment getRootAssignment_3() { return cRootAssignment_3; }
		
		//Root
		public RuleCall getRootRootParserRuleCall_3_0() { return cRootRootParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class RootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uwo.goal.GoalDSL.Root");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRootAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cActorsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActorsActorParserRuleCall_1_0 = (RuleCall)cActorsAssignment_1.eContents().get(0);
		private final Assignment cDependenciesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDependenciesDependencyParserRuleCall_2_0 = (RuleCall)cDependenciesAssignment_2.eContents().get(0);
		
		//Root:
		//    {Root} (actors += Actor)*
		//    (dependencies += Dependency)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Root} (actors += Actor)*
		//(dependencies += Dependency)*
		public Group getGroup() { return cGroup; }
		
		//{Root}
		public Action getRootAction_0() { return cRootAction_0; }
		
		//(actors += Actor)*
		public Assignment getActorsAssignment_1() { return cActorsAssignment_1; }
		
		//Actor
		public RuleCall getActorsActorParserRuleCall_1_0() { return cActorsActorParserRuleCall_1_0; }
		
		//(dependencies += Dependency)*
		public Assignment getDependenciesAssignment_2() { return cDependenciesAssignment_2; }
		
		//Dependency
		public RuleCall getDependenciesDependencyParserRuleCall_2_0() { return cDependenciesDependencyParserRuleCall_2_0; }
	}
	public class IntentionalElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uwo.goal.GoalDSL.IntentionalElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGoalTaskElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cResourceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//IntentionalElement:
		//    GoalTaskElement | Resource
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//GoalTaskElement | Resource
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GoalTaskElement
		public RuleCall getGoalTaskElementParserRuleCall_0() { return cGoalTaskElementParserRuleCall_0; }
		
		//Resource
		public RuleCall getResourceParserRuleCall_1() { return cResourceParserRuleCall_1; }
	}
	public class GoalTaskElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uwo.goal.GoalDSL.GoalTaskElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGoalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTaskParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//GoalTaskElement:
		//     Goal  | Task
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Goal  | Task
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Goal
		public RuleCall getGoalParserRuleCall_0() { return cGoalParserRuleCall_0; }
		
		//Task
		public RuleCall getTaskParserRuleCall_1() { return cTaskParserRuleCall_1; }
	}
	public class ActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uwo.goal.GoalDSL.Actor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cIntentionalElementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cIntentionalElementsIntentionalElementParserRuleCall_2_1_1_0 = (RuleCall)cIntentionalElementsAssignment_2_1_1.eContents().get(0);
		private final Assignment cContributionAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cContributionContributionParserRuleCall_2_1_2_0 = (RuleCall)cContributionAssignment_2_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_3 = (Keyword)cGroup_2_1.eContents().get(3);
		
		//Actor:
		//    'actor' name= ID
		//    (
		//        ';' |
		//        ('{'
		//        (intentionalElements+=IntentionalElement)*
		//        (contribution+=Contribution)*
		//        '}')
		//    )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'actor' name= ID
		//(
		//    ';' |
		//    ('{'
		//    (intentionalElements+=IntentionalElement)*
		//    (contribution+=Contribution)*
		//    '}')
		//)
		public Group getGroup() { return cGroup; }
		
		//'actor'
		public Keyword getActorKeyword_0() { return cActorKeyword_0; }
		
		//name= ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(
		//    ';' |
		//    ('{'
		//    (intentionalElements+=IntentionalElement)*
		//    (contribution+=Contribution)*
		//    '}')
		//)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//('{'
		//(intentionalElements+=IntentionalElement)*
		//(contribution+=Contribution)*
		//'}')
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(intentionalElements+=IntentionalElement)*
		public Assignment getIntentionalElementsAssignment_2_1_1() { return cIntentionalElementsAssignment_2_1_1; }
		
		//IntentionalElement
		public RuleCall getIntentionalElementsIntentionalElementParserRuleCall_2_1_1_0() { return cIntentionalElementsIntentionalElementParserRuleCall_2_1_1_0; }
		
		//(contribution+=Contribution)*
		public Assignment getContributionAssignment_2_1_2() { return cContributionAssignment_2_1_2; }
		
		//Contribution
		public RuleCall getContributionContributionParserRuleCall_2_1_2_0() { return cContributionContributionParserRuleCall_2_1_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_3() { return cRightCurlyBracketKeyword_2_1_3; }
	}
	public class GoalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uwo.goal.GoalDSL.Goal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGoalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cDecomposesToKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Assignment cDecompositionTypeAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cDecompositionTypeDecompositionTypeEnumRuleCall_2_1_2_0 = (RuleCall)cDecompositionTypeAssignment_2_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_1_3 = (Keyword)cGroup_2_1.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_2_1_4 = (Keyword)cGroup_2_1.eContents().get(4);
		private final Assignment cChilldrenAssignment_2_1_5 = (Assignment)cGroup_2_1.eContents().get(5);
		private final RuleCall cChilldrenGoalTaskElementParserRuleCall_2_1_5_0 = (RuleCall)cChilldrenAssignment_2_1_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_6 = (Keyword)cGroup_2_1.eContents().get(6);
		private final Keyword cSemicolonKeyword_2_1_7 = (Keyword)cGroup_2_1.eContents().get(7);
		private final Assignment cParentAssignment_2_1_8 = (Assignment)cGroup_2_1.eContents().get(8);
		private final CrossReference cParentGoalTaskElementCrossReference_2_1_8_0 = (CrossReference)cParentAssignment_2_1_8.eContents().get(0);
		private final RuleCall cParentGoalTaskElementIDTerminalRuleCall_2_1_8_0_1 = (RuleCall)cParentGoalTaskElementCrossReference_2_1_8_0.eContents().get(1);
		
		//Goal:
		//    'goal' name = ID
		//    (
		//        ';' |
		//        (
		//        'decomposesTo' '('decompositionType=DecompositionType')'
		//        '{'(chilldren+=GoalTaskElement)*'}' ';'
		//        (parent = [GoalTaskElement])?
		//        )
		//    )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'goal' name = ID
		//(
		//    ';' |
		//    (
		//    'decomposesTo' '('decompositionType=DecompositionType')'
		//    '{'(chilldren+=GoalTaskElement)*'}' ';'
		//    (parent = [GoalTaskElement])?
		//    )
		//)
		public Group getGroup() { return cGroup; }
		
		//'goal'
		public Keyword getGoalKeyword_0() { return cGoalKeyword_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(
		//    ';' |
		//    (
		//    'decomposesTo' '('decompositionType=DecompositionType')'
		//    '{'(chilldren+=GoalTaskElement)*'}' ';'
		//    (parent = [GoalTaskElement])?
		//    )
		//)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//(
		//'decomposesTo' '('decompositionType=DecompositionType')'
		//'{'(chilldren+=GoalTaskElement)*'}' ';'
		//(parent = [GoalTaskElement])?
		//)
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'decomposesTo'
		public Keyword getDecomposesToKeyword_2_1_0() { return cDecomposesToKeyword_2_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1_1() { return cLeftParenthesisKeyword_2_1_1; }
		
		//decompositionType=DecompositionType
		public Assignment getDecompositionTypeAssignment_2_1_2() { return cDecompositionTypeAssignment_2_1_2; }
		
		//DecompositionType
		public RuleCall getDecompositionTypeDecompositionTypeEnumRuleCall_2_1_2_0() { return cDecompositionTypeDecompositionTypeEnumRuleCall_2_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_1_3() { return cRightParenthesisKeyword_2_1_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_4() { return cLeftCurlyBracketKeyword_2_1_4; }
		
		//(chilldren+=GoalTaskElement)*
		public Assignment getChilldrenAssignment_2_1_5() { return cChilldrenAssignment_2_1_5; }
		
		//GoalTaskElement
		public RuleCall getChilldrenGoalTaskElementParserRuleCall_2_1_5_0() { return cChilldrenGoalTaskElementParserRuleCall_2_1_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_6() { return cRightCurlyBracketKeyword_2_1_6; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1_7() { return cSemicolonKeyword_2_1_7; }
		
		//(parent = [GoalTaskElement])?
		public Assignment getParentAssignment_2_1_8() { return cParentAssignment_2_1_8; }
		
		//[GoalTaskElement]
		public CrossReference getParentGoalTaskElementCrossReference_2_1_8_0() { return cParentGoalTaskElementCrossReference_2_1_8_0; }
		
		//ID
		public RuleCall getParentGoalTaskElementIDTerminalRuleCall_2_1_8_0_1() { return cParentGoalTaskElementIDTerminalRuleCall_2_1_8_0_1; }
	}
	public class TaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uwo.goal.GoalDSL.Task");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cDecomposesToKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Assignment cDecompositionTypeAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cDecompositionTypeDecompositionTypeEnumRuleCall_2_1_2_0 = (RuleCall)cDecompositionTypeAssignment_2_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_1_3 = (Keyword)cGroup_2_1.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_2_1_4 = (Keyword)cGroup_2_1.eContents().get(4);
		private final Assignment cChilldrenAssignment_2_1_5 = (Assignment)cGroup_2_1.eContents().get(5);
		private final RuleCall cChilldrenGoalTaskElementParserRuleCall_2_1_5_0 = (RuleCall)cChilldrenAssignment_2_1_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_6 = (Keyword)cGroup_2_1.eContents().get(6);
		private final Keyword cSemicolonKeyword_2_1_7 = (Keyword)cGroup_2_1.eContents().get(7);
		private final Assignment cParentAssignment_2_1_8 = (Assignment)cGroup_2_1.eContents().get(8);
		private final CrossReference cParentGoalTaskElementCrossReference_2_1_8_0 = (CrossReference)cParentAssignment_2_1_8.eContents().get(0);
		private final RuleCall cParentGoalTaskElementIDTerminalRuleCall_2_1_8_0_1 = (RuleCall)cParentGoalTaskElementCrossReference_2_1_8_0.eContents().get(1);
		
		//Task:
		//    'task' name = ID
		//    (
		//        ';' |
		//        (
		//        'decomposesTo' '('decompositionType=DecompositionType')'
		//        '{'(chilldren+=GoalTaskElement)*'}' ';'
		//        (parent = [GoalTaskElement])?
		//        )
		//    )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'task' name = ID
		//(
		//    ';' |
		//    (
		//    'decomposesTo' '('decompositionType=DecompositionType')'
		//    '{'(chilldren+=GoalTaskElement)*'}' ';'
		//    (parent = [GoalTaskElement])?
		//    )
		//)
		public Group getGroup() { return cGroup; }
		
		//'task'
		public Keyword getTaskKeyword_0() { return cTaskKeyword_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(
		//    ';' |
		//    (
		//    'decomposesTo' '('decompositionType=DecompositionType')'
		//    '{'(chilldren+=GoalTaskElement)*'}' ';'
		//    (parent = [GoalTaskElement])?
		//    )
		//)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//(
		//'decomposesTo' '('decompositionType=DecompositionType')'
		//'{'(chilldren+=GoalTaskElement)*'}' ';'
		//(parent = [GoalTaskElement])?
		//)
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'decomposesTo'
		public Keyword getDecomposesToKeyword_2_1_0() { return cDecomposesToKeyword_2_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1_1() { return cLeftParenthesisKeyword_2_1_1; }
		
		//decompositionType=DecompositionType
		public Assignment getDecompositionTypeAssignment_2_1_2() { return cDecompositionTypeAssignment_2_1_2; }
		
		//DecompositionType
		public RuleCall getDecompositionTypeDecompositionTypeEnumRuleCall_2_1_2_0() { return cDecompositionTypeDecompositionTypeEnumRuleCall_2_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_1_3() { return cRightParenthesisKeyword_2_1_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_4() { return cLeftCurlyBracketKeyword_2_1_4; }
		
		//(chilldren+=GoalTaskElement)*
		public Assignment getChilldrenAssignment_2_1_5() { return cChilldrenAssignment_2_1_5; }
		
		//GoalTaskElement
		public RuleCall getChilldrenGoalTaskElementParserRuleCall_2_1_5_0() { return cChilldrenGoalTaskElementParserRuleCall_2_1_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_6() { return cRightCurlyBracketKeyword_2_1_6; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1_7() { return cSemicolonKeyword_2_1_7; }
		
		//(parent = [GoalTaskElement])?
		public Assignment getParentAssignment_2_1_8() { return cParentAssignment_2_1_8; }
		
		//[GoalTaskElement]
		public CrossReference getParentGoalTaskElementCrossReference_2_1_8_0() { return cParentGoalTaskElementCrossReference_2_1_8_0; }
		
		//ID
		public RuleCall getParentGoalTaskElementIDTerminalRuleCall_2_1_8_0_1() { return cParentGoalTaskElementIDTerminalRuleCall_2_1_8_0_1; }
	}
	public class ResourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uwo.goal.GoalDSL.Resource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cResourceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cNeededByKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDestAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cDestTaskCrossReference_2_1_0 = (CrossReference)cDestAssignment_2_1.eContents().get(0);
		private final RuleCall cDestTaskQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cDestTaskCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cDestAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final CrossReference cDestTaskCrossReference_2_2_1_0 = (CrossReference)cDestAssignment_2_2_1.eContents().get(0);
		private final RuleCall cDestTaskQualifiedNameParserRuleCall_2_2_1_0_1 = (RuleCall)cDestTaskCrossReference_2_2_1_0.eContents().get(1);
		
		//Resource:
		//    'resource' name = ID
		//    (
		//        'neededBy' dest+=[Task|QualifiedName] (','dest+=[Task|QualifiedName])*
		//    )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'resource' name = ID
		//(
		//    'neededBy' dest+=[Task|QualifiedName] (','dest+=[Task|QualifiedName])*
		//)
		public Group getGroup() { return cGroup; }
		
		//'resource'
		public Keyword getResourceKeyword_0() { return cResourceKeyword_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(
		//    'neededBy' dest+=[Task|QualifiedName] (','dest+=[Task|QualifiedName])*
		//)
		public Group getGroup_2() { return cGroup_2; }
		
		//'neededBy'
		public Keyword getNeededByKeyword_2_0() { return cNeededByKeyword_2_0; }
		
		//dest+=[Task|QualifiedName]
		public Assignment getDestAssignment_2_1() { return cDestAssignment_2_1; }
		
		//[Task|QualifiedName]
		public CrossReference getDestTaskCrossReference_2_1_0() { return cDestTaskCrossReference_2_1_0; }
		
		//QualifiedName
		public RuleCall getDestTaskQualifiedNameParserRuleCall_2_1_0_1() { return cDestTaskQualifiedNameParserRuleCall_2_1_0_1; }
		
		//(','dest+=[Task|QualifiedName])*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//dest+=[Task|QualifiedName]
		public Assignment getDestAssignment_2_2_1() { return cDestAssignment_2_2_1; }
		
		//[Task|QualifiedName]
		public CrossReference getDestTaskCrossReference_2_2_1_0() { return cDestTaskCrossReference_2_2_1_0; }
		
		//QualifiedName
		public RuleCall getDestTaskQualifiedNameParserRuleCall_2_2_1_0_1() { return cDestTaskQualifiedNameParserRuleCall_2_2_1_0_1; }
	}
	public class ContributionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uwo.goal.GoalDSL.Contribution");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSrcAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSrcIntentionalElementCrossReference_0_0 = (CrossReference)cSrcAssignment_0.eContents().get(0);
		private final RuleCall cSrcIntentionalElementQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cSrcIntentionalElementCrossReference_0_0.eContents().get(1);
		private final Keyword cContributesToKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContributionTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContributionTypeContributionTypeEnumRuleCall_3_0 = (RuleCall)cContributionTypeAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDestAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cDestGoalTaskElementCrossReference_5_0 = (CrossReference)cDestAssignment_5.eContents().get(0);
		private final RuleCall cDestGoalTaskElementQualifiedNameParserRuleCall_5_0_1 = (RuleCall)cDestGoalTaskElementCrossReference_5_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cDestAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cDestGoalTaskElementCrossReference_6_1_0 = (CrossReference)cDestAssignment_6_1.eContents().get(0);
		private final RuleCall cDestGoalTaskElementQualifiedNameParserRuleCall_6_1_0_1 = (RuleCall)cDestGoalTaskElementCrossReference_6_1_0.eContents().get(1);
		
		//Contribution:
		//    src=[IntentionalElement|QualifiedName] 'contributesTo' '('contributionType=ContributionType')'
		//    dest+=[GoalTaskElement|QualifiedName]  (','dest+=[GoalTaskElement|QualifiedName])*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//src=[IntentionalElement|QualifiedName] 'contributesTo' '('contributionType=ContributionType')'
		//dest+=[GoalTaskElement|QualifiedName]  (','dest+=[GoalTaskElement|QualifiedName])*
		public Group getGroup() { return cGroup; }
		
		//src=[IntentionalElement|QualifiedName]
		public Assignment getSrcAssignment_0() { return cSrcAssignment_0; }
		
		//[IntentionalElement|QualifiedName]
		public CrossReference getSrcIntentionalElementCrossReference_0_0() { return cSrcIntentionalElementCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getSrcIntentionalElementQualifiedNameParserRuleCall_0_0_1() { return cSrcIntentionalElementQualifiedNameParserRuleCall_0_0_1; }
		
		//'contributesTo'
		public Keyword getContributesToKeyword_1() { return cContributesToKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//contributionType=ContributionType
		public Assignment getContributionTypeAssignment_3() { return cContributionTypeAssignment_3; }
		
		//ContributionType
		public RuleCall getContributionTypeContributionTypeEnumRuleCall_3_0() { return cContributionTypeContributionTypeEnumRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//dest+=[GoalTaskElement|QualifiedName]
		public Assignment getDestAssignment_5() { return cDestAssignment_5; }
		
		//[GoalTaskElement|QualifiedName]
		public CrossReference getDestGoalTaskElementCrossReference_5_0() { return cDestGoalTaskElementCrossReference_5_0; }
		
		//QualifiedName
		public RuleCall getDestGoalTaskElementQualifiedNameParserRuleCall_5_0_1() { return cDestGoalTaskElementQualifiedNameParserRuleCall_5_0_1; }
		
		//(','dest+=[GoalTaskElement|QualifiedName])*
		public Group getGroup_6() { return cGroup_6; }
		
		//','
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//dest+=[GoalTaskElement|QualifiedName]
		public Assignment getDestAssignment_6_1() { return cDestAssignment_6_1; }
		
		//[GoalTaskElement|QualifiedName]
		public CrossReference getDestGoalTaskElementCrossReference_6_1_0() { return cDestGoalTaskElementCrossReference_6_1_0; }
		
		//QualifiedName
		public RuleCall getDestGoalTaskElementQualifiedNameParserRuleCall_6_1_0_1() { return cDestGoalTaskElementQualifiedNameParserRuleCall_6_1_0_1; }
	}
	public class DependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uwo.goal.GoalDSL.Dependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSrcAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSrcIntentionalElementCrossReference_0_0 = (CrossReference)cSrcAssignment_0.eContents().get(0);
		private final RuleCall cSrcIntentionalElementQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cSrcIntentionalElementCrossReference_0_0.eContents().get(1);
		private final Keyword cDependsOnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDestAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cDestIntentionalElementCrossReference_2_0 = (CrossReference)cDestAssignment_2.eContents().get(0);
		private final RuleCall cDestIntentionalElementQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cDestIntentionalElementCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDestAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cDestIntentionalElementCrossReference_3_1_0 = (CrossReference)cDestAssignment_3_1.eContents().get(0);
		private final RuleCall cDestIntentionalElementQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cDestIntentionalElementCrossReference_3_1_0.eContents().get(1);
		
		//Dependency:
		//    src=[IntentionalElement|QualifiedName] 'dependsOn'
		//    dest+=[IntentionalElement|QualifiedName]  (','dest+=[IntentionalElement|QualifiedName])*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//src=[IntentionalElement|QualifiedName] 'dependsOn'
		//dest+=[IntentionalElement|QualifiedName]  (','dest+=[IntentionalElement|QualifiedName])*
		public Group getGroup() { return cGroup; }
		
		//src=[IntentionalElement|QualifiedName]
		public Assignment getSrcAssignment_0() { return cSrcAssignment_0; }
		
		//[IntentionalElement|QualifiedName]
		public CrossReference getSrcIntentionalElementCrossReference_0_0() { return cSrcIntentionalElementCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getSrcIntentionalElementQualifiedNameParserRuleCall_0_0_1() { return cSrcIntentionalElementQualifiedNameParserRuleCall_0_0_1; }
		
		//'dependsOn'
		public Keyword getDependsOnKeyword_1() { return cDependsOnKeyword_1; }
		
		//dest+=[IntentionalElement|QualifiedName]
		public Assignment getDestAssignment_2() { return cDestAssignment_2; }
		
		//[IntentionalElement|QualifiedName]
		public CrossReference getDestIntentionalElementCrossReference_2_0() { return cDestIntentionalElementCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getDestIntentionalElementQualifiedNameParserRuleCall_2_0_1() { return cDestIntentionalElementQualifiedNameParserRuleCall_2_0_1; }
		
		//(','dest+=[IntentionalElement|QualifiedName])*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//dest+=[IntentionalElement|QualifiedName]
		public Assignment getDestAssignment_3_1() { return cDestAssignment_3_1; }
		
		//[IntentionalElement|QualifiedName]
		public CrossReference getDestIntentionalElementCrossReference_3_1_0() { return cDestIntentionalElementCrossReference_3_1_0; }
		
		//QualifiedName
		public RuleCall getDestIntentionalElementQualifiedNameParserRuleCall_3_1_0_1() { return cDestIntentionalElementQualifiedNameParserRuleCall_3_1_0_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uwo.goal.GoalDSL.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//ID ('.' ID)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	public class DecompositionTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uwo.goal.GoalDSL.DecompositionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cANDAndKeyword_0_0 = (Keyword)cANDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOROrKeyword_1_0 = (Keyword)cOREnumLiteralDeclaration_1.eContents().get(0);
		
		//enum DecompositionType:
		//    AND='and'| OR='or'
		//;
		public EnumRule getRule() { return rule; }
		
		//AND='and'| OR='or'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AND='and'
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_0() { return cANDEnumLiteralDeclaration_0; }
		
		//'and'
		public Keyword getANDAndKeyword_0_0() { return cANDAndKeyword_0_0; }
		
		//OR='or'
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_1() { return cOREnumLiteralDeclaration_1; }
		
		//'or'
		public Keyword getOROrKeyword_1_0() { return cOROrKeyword_1_0; }
	}
	public class ContributionTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uwo.goal.GoalDSL.ContributionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMAKEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMAKESKeyword_0_0 = (Keyword)cMAKEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBREAKEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBREAKSKeyword_1_0 = (Keyword)cBREAKEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNEGATION_MAKEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNEGATION_MAKEDKeyword_2_0 = (Keyword)cNEGATION_MAKEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cNEGATION_BREAKEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cNEGATION_BREAKDKeyword_3_0 = (Keyword)cNEGATION_BREAKEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum ContributionType:
		//    MAKE='++S' | BREAK='--S' | NEGATION_MAKE='++D' | NEGATION_BREAK='--D'
		//;
		public EnumRule getRule() { return rule; }
		
		//MAKE='++S' | BREAK='--S' | NEGATION_MAKE='++D' | NEGATION_BREAK='--D'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MAKE='++S'
		public EnumLiteralDeclaration getMAKEEnumLiteralDeclaration_0() { return cMAKEEnumLiteralDeclaration_0; }
		
		//'++S'
		public Keyword getMAKESKeyword_0_0() { return cMAKESKeyword_0_0; }
		
		//BREAK='--S'
		public EnumLiteralDeclaration getBREAKEnumLiteralDeclaration_1() { return cBREAKEnumLiteralDeclaration_1; }
		
		//'--S'
		public Keyword getBREAKSKeyword_1_0() { return cBREAKSKeyword_1_0; }
		
		//NEGATION_MAKE='++D'
		public EnumLiteralDeclaration getNEGATION_MAKEEnumLiteralDeclaration_2() { return cNEGATION_MAKEEnumLiteralDeclaration_2; }
		
		//'++D'
		public Keyword getNEGATION_MAKEDKeyword_2_0() { return cNEGATION_MAKEDKeyword_2_0; }
		
		//NEGATION_BREAK='--D'
		public EnumLiteralDeclaration getNEGATION_BREAKEnumLiteralDeclaration_3() { return cNEGATION_BREAKEnumLiteralDeclaration_3; }
		
		//'--D'
		public Keyword getNEGATION_BREAKDKeyword_3_0() { return cNEGATION_BREAKDKeyword_3_0; }
	}
	
	private final GoalSpecificationElements pGoalSpecification;
	private final RootElements pRoot;
	private final IntentionalElementElements pIntentionalElement;
	private final GoalTaskElementElements pGoalTaskElement;
	private final ActorElements pActor;
	private final GoalElements pGoal;
	private final TaskElements pTask;
	private final ResourceElements pResource;
	private final ContributionElements pContribution;
	private final DependencyElements pDependency;
	private final DecompositionTypeElements eDecompositionType;
	private final ContributionTypeElements eContributionType;
	private final QualifiedNameElements pQualifiedName;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GoalDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pGoalSpecification = new GoalSpecificationElements();
		this.pRoot = new RootElements();
		this.pIntentionalElement = new IntentionalElementElements();
		this.pGoalTaskElement = new GoalTaskElementElements();
		this.pActor = new ActorElements();
		this.pGoal = new GoalElements();
		this.pTask = new TaskElements();
		this.pResource = new ResourceElements();
		this.pContribution = new ContributionElements();
		this.pDependency = new DependencyElements();
		this.eDecompositionType = new DecompositionTypeElements();
		this.eContributionType = new ContributionTypeElements();
		this.pQualifiedName = new QualifiedNameElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("ca.uwo.goal.GoalDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//GoalSpecification:
	//    'goal'
	//    name=STRING
	//    '{'
	//        root=Root
	//    '}'
	//;
	public GoalSpecificationElements getGoalSpecificationAccess() {
		return pGoalSpecification;
	}
	
	public ParserRule getGoalSpecificationRule() {
		return getGoalSpecificationAccess().getRule();
	}
	
	//Root:
	//    {Root} (actors += Actor)*
	//    (dependencies += Dependency)*
	//;
	public RootElements getRootAccess() {
		return pRoot;
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}
	
	//IntentionalElement:
	//    GoalTaskElement | Resource
	//;
	public IntentionalElementElements getIntentionalElementAccess() {
		return pIntentionalElement;
	}
	
	public ParserRule getIntentionalElementRule() {
		return getIntentionalElementAccess().getRule();
	}
	
	//GoalTaskElement:
	//     Goal  | Task
	//;
	public GoalTaskElementElements getGoalTaskElementAccess() {
		return pGoalTaskElement;
	}
	
	public ParserRule getGoalTaskElementRule() {
		return getGoalTaskElementAccess().getRule();
	}
	
	//Actor:
	//    'actor' name= ID
	//    (
	//        ';' |
	//        ('{'
	//        (intentionalElements+=IntentionalElement)*
	//        (contribution+=Contribution)*
	//        '}')
	//    )
	//;
	public ActorElements getActorAccess() {
		return pActor;
	}
	
	public ParserRule getActorRule() {
		return getActorAccess().getRule();
	}
	
	//Goal:
	//    'goal' name = ID
	//    (
	//        ';' |
	//        (
	//        'decomposesTo' '('decompositionType=DecompositionType')'
	//        '{'(chilldren+=GoalTaskElement)*'}' ';'
	//        (parent = [GoalTaskElement])?
	//        )
	//    )
	//;
	public GoalElements getGoalAccess() {
		return pGoal;
	}
	
	public ParserRule getGoalRule() {
		return getGoalAccess().getRule();
	}
	
	//Task:
	//    'task' name = ID
	//    (
	//        ';' |
	//        (
	//        'decomposesTo' '('decompositionType=DecompositionType')'
	//        '{'(chilldren+=GoalTaskElement)*'}' ';'
	//        (parent = [GoalTaskElement])?
	//        )
	//    )
	//;
	public TaskElements getTaskAccess() {
		return pTask;
	}
	
	public ParserRule getTaskRule() {
		return getTaskAccess().getRule();
	}
	
	//Resource:
	//    'resource' name = ID
	//    (
	//        'neededBy' dest+=[Task|QualifiedName] (','dest+=[Task|QualifiedName])*
	//    )
	//;
	public ResourceElements getResourceAccess() {
		return pResource;
	}
	
	public ParserRule getResourceRule() {
		return getResourceAccess().getRule();
	}
	
	//Contribution:
	//    src=[IntentionalElement|QualifiedName] 'contributesTo' '('contributionType=ContributionType')'
	//    dest+=[GoalTaskElement|QualifiedName]  (','dest+=[GoalTaskElement|QualifiedName])*
	//;
	public ContributionElements getContributionAccess() {
		return pContribution;
	}
	
	public ParserRule getContributionRule() {
		return getContributionAccess().getRule();
	}
	
	//Dependency:
	//    src=[IntentionalElement|QualifiedName] 'dependsOn'
	//    dest+=[IntentionalElement|QualifiedName]  (','dest+=[IntentionalElement|QualifiedName])*
	//;
	public DependencyElements getDependencyAccess() {
		return pDependency;
	}
	
	public ParserRule getDependencyRule() {
		return getDependencyAccess().getRule();
	}
	
	//enum DecompositionType:
	//    AND='and'| OR='or'
	//;
	public DecompositionTypeElements getDecompositionTypeAccess() {
		return eDecompositionType;
	}
	
	public EnumRule getDecompositionTypeRule() {
		return getDecompositionTypeAccess().getRule();
	}
	
	//enum ContributionType:
	//    MAKE='++S' | BREAK='--S' | NEGATION_MAKE='++D' | NEGATION_BREAK='--D'
	//;
	public ContributionTypeElements getContributionTypeAccess() {
		return eContributionType;
	}
	
	public EnumRule getContributionTypeRule() {
		return getContributionTypeAccess().getRule();
	}
	
	//QualifiedName:
	//ID ('.' ID)*
	//;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
