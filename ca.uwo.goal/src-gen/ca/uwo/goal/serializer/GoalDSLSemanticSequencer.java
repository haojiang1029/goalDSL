/*
 * generated by Xtext 2.32.0
 */
package ca.uwo.goal.serializer;

import ca.uwo.goal.goalDSL.Actor;
import ca.uwo.goal.goalDSL.Contribution;
import ca.uwo.goal.goalDSL.Dependency;
import ca.uwo.goal.goalDSL.Goal;
import ca.uwo.goal.goalDSL.GoalDSLPackage;
import ca.uwo.goal.goalDSL.GoalSpecification;
import ca.uwo.goal.goalDSL.Resource;
import ca.uwo.goal.goalDSL.Root;
import ca.uwo.goal.goalDSL.Task;
import ca.uwo.goal.services.GoalDSLGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class GoalDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private GoalDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GoalDSLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GoalDSLPackage.ACTOR:
				sequence_Actor(context, (Actor) semanticObject); 
				return; 
			case GoalDSLPackage.CONTRIBUTION:
				sequence_Contribution(context, (Contribution) semanticObject); 
				return; 
			case GoalDSLPackage.DEPENDENCY:
				sequence_Dependency(context, (Dependency) semanticObject); 
				return; 
			case GoalDSLPackage.GOAL:
				sequence_Goal(context, (Goal) semanticObject); 
				return; 
			case GoalDSLPackage.GOAL_SPECIFICATION:
				sequence_GoalSpecification(context, (GoalSpecification) semanticObject); 
				return; 
			case GoalDSLPackage.RESOURCE:
				sequence_Resource(context, (Resource) semanticObject); 
				return; 
			case GoalDSLPackage.ROOT:
				sequence_Root(context, (Root) semanticObject); 
				return; 
			case GoalDSLPackage.TASK:
				sequence_Task(context, (Task) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Actor returns Actor
	 *
	 * Constraint:
	 *     (name=ID intentionalElements+=IntentionalElement* contribution+=Contribution*)
	 * </pre>
	 */
	protected void sequence_Actor(ISerializationContext context, Actor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Contribution returns Contribution
	 *
	 * Constraint:
	 *     (
	 *         src=[IntentionalElement|QualifiedName] 
	 *         contributionType=ContributionType 
	 *         dest+=[GoalTaskElement|QualifiedName] 
	 *         dest+=[GoalTaskElement|QualifiedName]*
	 *     )
	 * </pre>
	 */
	protected void sequence_Contribution(ISerializationContext context, Contribution semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Dependency returns Dependency
	 *
	 * Constraint:
	 *     (src=[IntentionalElement|QualifiedName] dest+=[IntentionalElement|QualifiedName] dest+=[IntentionalElement|QualifiedName]*)
	 * </pre>
	 */
	protected void sequence_Dependency(ISerializationContext context, Dependency semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GoalSpecification returns GoalSpecification
	 *
	 * Constraint:
	 *     (name=STRING root=Root)
	 * </pre>
	 */
	protected void sequence_GoalSpecification(ISerializationContext context, GoalSpecification semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoalDSLPackage.Literals.GOAL_SPECIFICATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoalDSLPackage.Literals.GOAL_SPECIFICATION__NAME));
			if (transientValues.isValueTransient(semanticObject, GoalDSLPackage.Literals.GOAL_SPECIFICATION__ROOT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoalDSLPackage.Literals.GOAL_SPECIFICATION__ROOT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGoalSpecificationAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getGoalSpecificationAccess().getRootRootParserRuleCall_3_0(), semanticObject.getRoot());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     IntentionalElement returns Goal
	 *     GoalTaskElement returns Goal
	 *     Goal returns Goal
	 *
	 * Constraint:
	 *     (name=ID (decompositionType=DecompositionType chilldren+=GoalTaskElement* parent=[GoalTaskElement|ID]?)?)
	 * </pre>
	 */
	protected void sequence_Goal(ISerializationContext context, Goal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     IntentionalElement returns Resource
	 *     Resource returns Resource
	 *
	 * Constraint:
	 *     (name=ID dest+=[Task|QualifiedName] dest+=[Task|QualifiedName]*)
	 * </pre>
	 */
	protected void sequence_Resource(ISerializationContext context, Resource semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Root returns Root
	 *
	 * Constraint:
	 *     (actors+=Actor* dependencies+=Dependency*)
	 * </pre>
	 */
	protected void sequence_Root(ISerializationContext context, Root semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     IntentionalElement returns Task
	 *     GoalTaskElement returns Task
	 *     Task returns Task
	 *
	 * Constraint:
	 *     (name=ID (decompositionType=DecompositionType chilldren+=GoalTaskElement* parent=[GoalTaskElement|ID]?)?)
	 * </pre>
	 */
	protected void sequence_Task(ISerializationContext context, Task semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
