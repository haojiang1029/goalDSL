/**
 * generated by Xtext 2.32.0
 */
package ca.uwo.goal.goalDSL.impl;

import ca.uwo.goal.goalDSL.DecompositionType;
import ca.uwo.goal.goalDSL.GoalDSLPackage;
import ca.uwo.goal.goalDSL.GoalTaskElement;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Goal Task Element</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ca.uwo.goal.goalDSL.impl.GoalTaskElementImpl#getDecompositionType <em>Decomposition Type</em>}</li>
 *   <li>{@link ca.uwo.goal.goalDSL.impl.GoalTaskElementImpl#getChilldren <em>Chilldren</em>}</li>
 *   <li>{@link ca.uwo.goal.goalDSL.impl.GoalTaskElementImpl#getParent <em>Parent</em>}</li>
 * </ul>
 *
 * @generated
 */
public class GoalTaskElementImpl extends IntentionalElementImpl implements GoalTaskElement
{
  /**
   * The default value of the '{@link #getDecompositionType() <em>Decomposition Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDecompositionType()
   * @generated
   * @ordered
   */
  protected static final DecompositionType DECOMPOSITION_TYPE_EDEFAULT = DecompositionType.AND;

  /**
   * The cached value of the '{@link #getDecompositionType() <em>Decomposition Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDecompositionType()
   * @generated
   * @ordered
   */
  protected DecompositionType decompositionType = DECOMPOSITION_TYPE_EDEFAULT;

  /**
   * The cached value of the '{@link #getChilldren() <em>Chilldren</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChilldren()
   * @generated
   * @ordered
   */
  protected EList<GoalTaskElement> chilldren;

  /**
   * The cached value of the '{@link #getParent() <em>Parent</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParent()
   * @generated
   * @ordered
   */
  protected GoalTaskElement parent;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GoalTaskElementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GoalDSLPackage.Literals.GOAL_TASK_ELEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DecompositionType getDecompositionType()
  {
    return decompositionType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDecompositionType(DecompositionType newDecompositionType)
  {
    DecompositionType oldDecompositionType = decompositionType;
    decompositionType = newDecompositionType == null ? DECOMPOSITION_TYPE_EDEFAULT : newDecompositionType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoalDSLPackage.GOAL_TASK_ELEMENT__DECOMPOSITION_TYPE, oldDecompositionType, decompositionType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<GoalTaskElement> getChilldren()
  {
    if (chilldren == null)
    {
      chilldren = new EObjectContainmentEList<GoalTaskElement>(GoalTaskElement.class, this, GoalDSLPackage.GOAL_TASK_ELEMENT__CHILLDREN);
    }
    return chilldren;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GoalTaskElement getParent()
  {
    if (parent != null && parent.eIsProxy())
    {
      InternalEObject oldParent = (InternalEObject)parent;
      parent = (GoalTaskElement)eResolveProxy(oldParent);
      if (parent != oldParent)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, GoalDSLPackage.GOAL_TASK_ELEMENT__PARENT, oldParent, parent));
      }
    }
    return parent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GoalTaskElement basicGetParent()
  {
    return parent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setParent(GoalTaskElement newParent)
  {
    GoalTaskElement oldParent = parent;
    parent = newParent;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoalDSLPackage.GOAL_TASK_ELEMENT__PARENT, oldParent, parent));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GoalDSLPackage.GOAL_TASK_ELEMENT__CHILLDREN:
        return ((InternalEList<?>)getChilldren()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GoalDSLPackage.GOAL_TASK_ELEMENT__DECOMPOSITION_TYPE:
        return getDecompositionType();
      case GoalDSLPackage.GOAL_TASK_ELEMENT__CHILLDREN:
        return getChilldren();
      case GoalDSLPackage.GOAL_TASK_ELEMENT__PARENT:
        if (resolve) return getParent();
        return basicGetParent();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GoalDSLPackage.GOAL_TASK_ELEMENT__DECOMPOSITION_TYPE:
        setDecompositionType((DecompositionType)newValue);
        return;
      case GoalDSLPackage.GOAL_TASK_ELEMENT__CHILLDREN:
        getChilldren().clear();
        getChilldren().addAll((Collection<? extends GoalTaskElement>)newValue);
        return;
      case GoalDSLPackage.GOAL_TASK_ELEMENT__PARENT:
        setParent((GoalTaskElement)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GoalDSLPackage.GOAL_TASK_ELEMENT__DECOMPOSITION_TYPE:
        setDecompositionType(DECOMPOSITION_TYPE_EDEFAULT);
        return;
      case GoalDSLPackage.GOAL_TASK_ELEMENT__CHILLDREN:
        getChilldren().clear();
        return;
      case GoalDSLPackage.GOAL_TASK_ELEMENT__PARENT:
        setParent((GoalTaskElement)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GoalDSLPackage.GOAL_TASK_ELEMENT__DECOMPOSITION_TYPE:
        return decompositionType != DECOMPOSITION_TYPE_EDEFAULT;
      case GoalDSLPackage.GOAL_TASK_ELEMENT__CHILLDREN:
        return chilldren != null && !chilldren.isEmpty();
      case GoalDSLPackage.GOAL_TASK_ELEMENT__PARENT:
        return parent != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (decompositionType: ");
    result.append(decompositionType);
    result.append(')');
    return result.toString();
  }

} //GoalTaskElementImpl
